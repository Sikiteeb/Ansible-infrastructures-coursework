- name: Install bind9
  apt:
    name: 
      - bind9
      - python3-dnspython
        
- name: Resolv.conf
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf

- name: Stop systemd-resolved
  systemd:
    name: systemd-resolved
    enabled: no 
    state: stopped    
  
- name: Option
  template:
    src: named.conf.options.j2
    dest: /etc/bind/named.conf.options
  no_log: True
  notify: 
    - Restart Bind9
    - Reconfigure rndc
  
- name: Local  
  template:
    src: named.conf.local.j2
    dest: /etc/bind/named.conf.local
  notify: 
    - Restart Bind9
    - Reconfigure rndc
  
  
- name: DNS Primary Zone
  template: 
    src: db.maledetta
    dest: /var/cache/bind/db.maledetta
    force: no
  notify: 
    - Restart Bind9
    - Reconfigure rndc
  when: inventory_hostname in groups ['dns_master']
  register: dns_config

- name: Reverse DNS Primary Zone
  template: 
    src: db.maledetta.reverse
    dest: /var/cache/bind/db.maledetta.reverse
    force: no
  notify: 
    - Restart Bind9
    - Reconfigure rndc
  when: inventory_hostname in groups ['dns_master']
  register: dns_config
  
- name: Enable bind9
  service:
    name: bind9
    state: started
    enabled: yes

- name: execute handlers
  meta: flush_handlers
  
- name: Wait for 15 sec
  pause:
    seconds: 15
  when: dns_config.changed

- name: Create A records
  community.general.nsupdate:
    key_name: "nsupdate.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ dns_update_key}}"
    server: "{{ hostvars[groups['dns_master'][0]]['ansible_default_ipv4']['address'] }}"
    zone: "{{ fqdn }}."
    record: "{{ item['subdomain'] }}.{{ fqdn }}."
    type: "A"
    value: "{{ item['ip'] }}"
  loop: "{{ a_records }}"
  run_once: True
  when: inventory_hostname in groups ['dns_master']

- name: Create CNAME records
  community.general.nsupdate:
    key_name: "nsupdate.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ dns_update_key }}"
    server: "localhost"
    zone: "{{ fqdn }}"
    record: "{{ item.key }}"
    type: "CNAME"
    value: "{{ item.value }}"
  loop: "{{ dns_cname_records | dict2items }}"
  run_once: True
  when: inventory_hostname in groups ['dns_master']